{"version":3,"file":"backend.service.js","sourceRoot":"","sources":["../src/in-mem/backend.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Observer, BehaviorSubject, of, from } from 'rxjs';\nimport { concatMap, first } from 'rxjs/operators';\n\nimport { getStatusText, isSuccess, STATUS } from './http-status-codes';\nimport { delayResponse } from './delay-response';\n\nimport {\n  HeadersCore,\n  RequestInfoUtilities,\n  InMemoryDbService,\n  InMemoryBackendConfig,\n  InMemoryBackendConfigArgs,\n  ParsedRequestUrl,\n  parseUri,\n  PassThruBackend,\n  removeTrailingSlash,\n  RequestCore,\n  RequestInfo,\n  ResponseOptions,\n  UriInfo\n} from './interfaces';\n\n/**\n * Base class for in-memory web api back-ends\n * Simulate the behavior of a RESTy web api\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService` service.\n * Conforms mostly to behavior described here:\n * http://www.restapitutorial.com/lessons/httpmethods.html\n */\nexport abstract class BackendService {\n  protected config: InMemoryBackendConfigArgs = new InMemoryBackendConfig();\n  protected db: Object;\n  protected dbReadySubject: BehaviorSubject<boolean>;\n  private passThruBackend: PassThruBackend;\n  protected requestInfoUtils = this.getRequestInfoUtils();\n\n  constructor(\n    protected inMemDbService: InMemoryDbService,\n    config: InMemoryBackendConfigArgs = {}\n  ) {\n    const loc = this.getLocation('/');\n    this.config.host = loc.host;     // default to app web server host\n    this.config.rootPath = loc.path; // default to path when app is served (e.g.'/')\n    Object.assign(this.config, config);\n  }\n\n  ////  protected /////\n  protected get dbReady(): Observable<boolean> {\n    if (!this.dbReadySubject) {\n      // first time the service is called.\n      this.dbReadySubject = new BehaviorSubject(false);\n      this.resetDb();\n    }\n    return this.dbReadySubject.asObservable().pipe(first((r: boolean) => r));\n  }\n\n  /**\n   * Process Request and return an Observable of Http Response object\n   * in the manner of a RESTy web api.\n   *\n   * Expect URI pattern in the form :base/:collectionName/:id?\n   * Examples:\n   *   // for store with a 'customers' collection\n   *   GET api/customers          // all customers\n   *   GET api/customers/42       // the character with id=42\n   *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or 'J'\n   *   GET api/customers.json/42  // ignores the \".json\"\n   *\n   * Also accepts direct commands to the service in which the last segment of the apiBase is the word \"commands\"\n   * Examples:\n   *     POST commands/resetDb,\n   *     GET/POST commands/config - get or (re)set the config\n   *\n   *   HTTP overrides:\n   *     If the injected inMemDbService defines an HTTP method (lowercase)\n   *     The request is forwarded to that method as in\n   *     `inMemDbService.get(requestInfo)`\n   *     which must return either an Observable of the response type\n   *     for this http library or null|undefined (which means \"keep processing\").\n   */\n  protected handleRequest(req: RequestCore): Observable<any> {\n    //  handle the request when there is an in-memory database\n    return this.dbReady.pipe(concatMap(() => this.handleRequest_(req)));\n  }\n\n  protected handleRequest_(req: RequestCore): Observable<any> {\n\n    const url = req.urlWithParams ? req.urlWithParams : req.url;\n\n    // Try override parser\n    // If no override parser or it returns nothing, use default parser\n    const parser = this.bind('parseRequestUrl');\n    const parsed: ParsedRequestUrl =\n      ( parser && parser(url, this.requestInfoUtils)) ||\n      this.parseRequestUrl(url);\n\n    const collectionName = parsed.collectionName;\n    const collection = this.db[collectionName];\n\n    const reqInfo: RequestInfo = {\n      req: req,\n      apiBase: parsed.apiBase,\n      collection: collection,\n      collectionName: collectionName,\n      headers: this.createHeaders({ 'Content-Type': 'application/json' }),\n      id: this.parseId(collection, collectionName, parsed.id),\n      method: this.getRequestMethod(req),\n      query: parsed.query,\n      resourceUrl: parsed.resourceUrl,\n      url: url,\n      utils: this.requestInfoUtils\n    };\n\n    let resOptions: ResponseOptions;\n\n    if (/commands\\/?$/i.test(reqInfo.apiBase)) {\n      return this.commands(reqInfo);\n    }\n\n    const methodInterceptor = this.bind(reqInfo.method);\n    if (methodInterceptor) {\n      // InMemoryDbService intercepts this HTTP method.\n      // if interceptor produced a response, return it.\n      // else InMemoryDbService chose not to intercept; continue processing.\n      const interceptorResponse = methodInterceptor(reqInfo);\n      if (interceptorResponse) {\n        return interceptorResponse;\n      };\n    }\n\n    if (this.db[collectionName]) {\n      // request is for a known collection of the InMemoryDbService\n      return this.createResponse$(() => this.collectionHandler(reqInfo));\n    }\n\n    if (this.config.passThruUnknownUrl) {\n      // unknown collection; pass request thru to a \"real\" backend.\n      return this.getPassThruBackend().handle(req);\n    }\n\n    // 404 - can't handle this request\n    resOptions = this.createErrorResponseOptions(\n      url,\n      STATUS.NOT_FOUND,\n      `Collection '${collectionName}' not found`\n    );\n    return this.createResponse$(() => resOptions);\n  }\n\n  /**\n   * Add configured delay to response observable unless delay === 0\n   */\n  protected addDelay(response: Observable<any>): Observable<any> {\n    const d = this.config.delay;\n    return d === 0 ? response : delayResponse(response, d || 500);\n  }\n\n  /**\n   * Apply query/search parameters as a filter over the collection\n   * This impl only supports RegExp queries on string properties of the collection\n   * ANDs the conditions together\n   */\n  protected applyQuery(collection: any[], query: Map<string, string[]>): any[] {\n    // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\n    const conditions: { name: string, rx: RegExp }[] = [];\n    const caseSensitive = this.config.caseSensitiveSearch ? undefined : 'i';\n    query.forEach((value: string[], name: string) => {\n      value.forEach(v => conditions.push({ name, rx: new RegExp(decodeURI(v), caseSensitive) }));\n    });\n\n    const len = conditions.length;\n    if (!len) { return collection; }\n\n    // AND the RegExp conditions\n    return collection.filter(row => {\n      let ok = true;\n      let i = len;\n      while (ok && i) {\n        i -= 1;\n        const cond = conditions[i];\n        ok = cond.rx.test(row[cond.name]);\n      }\n      return ok;\n    });\n  }\n\n  /**\n   * Get a method from the `InMemoryDbService` (if it exists), bound to that service\n   */\n  protected bind<T extends Function>(methodName: string) {\n    const fn = this.inMemDbService[methodName] as T;\n    return fn ? <T> fn.bind(this.inMemDbService) : undefined;\n  }\n\n  protected bodify(data: any) {\n    return this.config.dataEncapsulation ? { data } : data;\n  }\n\n  protected clone(data: any) {\n    return JSON.parse(JSON.stringify(data));\n  }\n\n  protected collectionHandler(reqInfo: RequestInfo): ResponseOptions {\n    // const req = reqInfo.req;\n      let resOptions: ResponseOptions;\n      switch (reqInfo.method) {\n        case 'get':\n          resOptions = this.get(reqInfo);\n          break;\n        case 'post':\n          resOptions = this.post(reqInfo);\n          break;\n        case 'put':\n          resOptions = this.put(reqInfo);\n          break;\n        case 'delete':\n          resOptions = this.delete(reqInfo);\n          break;\n        default:\n          resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\n          break;\n      }\n\n      // If `inMemDbService.responseInterceptor` exists, let it morph the response options\n      const interceptor = this.bind('responseInterceptor');\n      return interceptor ? interceptor(resOptions, reqInfo) : resOptions;\n  }\n\n  /**\n   * Commands reconfigure the in-memory web api service or extract information from it.\n   * Commands ignore the latency delay and respond ASAP.\n   *\n   * When the last segment of the `apiBase` path is \"commands\",\n   * the `collectionName` is the command.\n   *\n   * Example URLs:\n   *   commands/resetdb (POST) // Reset the \"database\" to its original state\n   *   commands/config (GET)   // Return this service's config object\n   *   commands/config (POST)  // Update the config (e.g. the delay)\n   *\n   * Usage:\n   *   http.post('commands/resetdb', undefined);\n   *   http.get('commands/config');\n   *   http.post('commands/config', '{\"delay\":1000}');\n   */\n  protected commands(reqInfo: RequestInfo): Observable<any> {\n    const command = reqInfo.collectionName.toLowerCase();\n    const method = reqInfo.method;\n\n    let resOptions: ResponseOptions = {\n      url: reqInfo.url\n    };\n\n    switch (command) {\n      case 'resetdb':\n        resOptions.status = STATUS.NO_CONTENT;\n        return this.resetDb(reqInfo).pipe(\n          concatMap(() => this.createResponse$(() => resOptions, false /* no latency delay */))\n        );\n\n      case 'config':\n        if (method === 'get') {\n          resOptions.status = STATUS.OK;\n          resOptions.body = this.clone(this.config);\n\n        // any other HTTP method is assumed to be a config update\n        } else {\n          const body = this.getJsonBody(reqInfo.req);\n          Object.assign(this.config, body);\n          this.passThruBackend = undefined; // re-create when needed\n\n          resOptions.status = STATUS.NO_CONTENT;\n        }\n        break;\n\n      default:\n        resOptions = this.createErrorResponseOptions(\n          reqInfo.url,\n          STATUS.INTERNAL_SERVER_ERROR,\n          `Unknown command \"${command}\"`\n        );\n    }\n\n    return this.createResponse$(() => resOptions, false /* no latency delay */);\n  }\n\n  protected createErrorResponseOptions(url: string, status: number, message: string): ResponseOptions {\n    return {\n      body: { error: `${message}` },\n      url: url,\n      headers: this.createHeaders({ 'Content-Type': 'application/json' }),\n      status: status\n    };\n  }\n\n  /**\n   * Create standard HTTP headers object from hash map of header strings\n   * @param headers\n   */\n  protected abstract createHeaders(headers: {[index: string]: string}): HeadersCore;\n\n  /**\n   * create the function that passes unhandled requests through to the \"real\" backend.\n   */\n  protected abstract createPassThruBackend(): PassThruBackend;\n\n  /**\n   * return a search map from a location query/search string\n   */\n  protected abstract createQueryMap(search: string): Map<string, string[]>;\n\n  /**\n   * Create a cold response Observable from a factory for ResponseOptions\n   * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n   * @param withDelay - if true (default), add simulated latency delay from configuration\n   */\n  protected createResponse$(resOptionsFactory: () => ResponseOptions, withDelay = true): Observable<any> {\n    const resOptions$ = this.createResponseOptions$(resOptionsFactory);\n    let resp$ = this.createResponse$fromResponseOptions$(resOptions$);\n    return withDelay ? this.addDelay(resp$) : resp$;\n  }\n\n  /**\n   * Create a Response observable from ResponseOptions observable.\n   */\n  protected abstract createResponse$fromResponseOptions$(resOptions$: Observable<ResponseOptions>): Observable<any>;\n\n  /**\n   * Create a cold Observable of ResponseOptions.\n   * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n   */\n  protected createResponseOptions$(resOptionsFactory: () => ResponseOptions): Observable<ResponseOptions> {\n\n    return new Observable<ResponseOptions>((responseObserver: Observer<ResponseOptions>) => {\n      let resOptions: ResponseOptions;\n      try {\n        resOptions = resOptionsFactory();\n      } catch (error) {\n        const err = error.message || error;\n        resOptions = this.createErrorResponseOptions('', STATUS.INTERNAL_SERVER_ERROR, `${err}`);\n      }\n\n      const status = resOptions.status;\n      try {\n        resOptions.statusText = getStatusText(status);\n      } catch (e) { /* ignore failure */}\n      if (isSuccess(status)) {\n        responseObserver.next(resOptions);\n        responseObserver.complete();\n      } else {\n        responseObserver.error(resOptions);\n      }\n      return () => { }; // unsubscribe function\n    });\n  }\n\n  protected delete({ collection, collectionName, headers, id, url}: RequestInfo): ResponseOptions {\n    // tslint:disable-next-line:triple-equals\n    if (id == undefined) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, `Missing \"${collectionName}\" id`);\n    }\n    const exists = this.removeById(collection, id);\n    return {\n      headers: headers,\n      status: (exists || !this.config.delete404) ? STATUS.NO_CONTENT : STATUS.NOT_FOUND\n    };\n  }\n\n  /**\n   * Find first instance of item in collection by `item.id`\n   * @param collection\n   * @param id\n   */\n  protected findById<T extends { id: any }>(collection: T[], id: any): T {\n    return collection.find((item: T) => item.id === id);\n  }\n\n  /**\n   * Generate the next available id for item in this collection\n   * Use method from `inMemDbService` if it exists and returns a value,\n   * else delegates to `genIdDefault`.\n   * @param collection - collection of items with `id` key property\n   */\n  protected genId<T extends { id: any }>(collection: T[], collectionName: string): any {\n    const genId = this.bind('genId');\n    if (genId) {\n      const id = genId(collection, collectionName);\n      // tslint:disable-next-line:triple-equals\n      if (id != undefined) { return id; }\n    }\n    return this.genIdDefault(collection, collectionName);\n  }\n\n  /**\n   * Default generator of the next available id for item in this collection\n   * This default implementation works only for numeric ids.\n   * @param collection - collection of items with `id` key property\n   * @param collectionName - name of the collection\n   */\n  protected genIdDefault<T extends { id: any }>(collection: T[], collectionName: string): any {\n    if (!this.isCollectionIdNumeric(collection, collectionName)) {\n      throw new Error(\n        `Collection '${collectionName}' id type is non-numeric or unknown. Can only generate numeric ids.`);\n    }\n\n    let maxId = 0;\n    collection.reduce((prev: any, item: any) => {\n      maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\n    }, undefined);\n    return maxId + 1;\n  }\n\n  protected get({ collection, collectionName, headers, id, query, url }: RequestInfo): ResponseOptions {\n    let data = collection;\n\n    // tslint:disable-next-line:triple-equals\n    if (id != undefined && id !== '') {\n      data = this.findById(collection, id);\n    } else if (query) {\n      data = this.applyQuery(collection, query);\n    }\n\n    if (!data) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, `'${collectionName}' with id='${id}' not found`);\n    }\n    return {\n      body: this.bodify(this.clone(data)),\n      headers: headers,\n      status: STATUS.OK\n    };\n  }\n\n  /** Get JSON body from the request object */\n  protected abstract getJsonBody(req: any): any;\n\n  /**\n   * Get location info from a url, even on server where `document` is not defined\n   */\n  protected getLocation(url: string): UriInfo {\n    if (!url.startsWith('http')) {\n      // get the document iff running in browser\n      const doc: Document = (typeof document === 'undefined') ? undefined : document;\n      // add host info to url before parsing.  Use a fake host when not in browser.\n      const base = doc ? doc.location.protocol + '//' + doc.location.host : 'http://fake';\n      url = url.startsWith('/') ? base + url : base + '/' + url;\n    }\n    return parseUri(url);\n  };\n\n  /**\n   * get or create the function that passes unhandled requests\n   * through to the \"real\" backend.\n   */\n  protected getPassThruBackend(): PassThruBackend {\n    return this.passThruBackend ?\n      this.passThruBackend :\n      this.passThruBackend = this.createPassThruBackend();\n  }\n\n  /**\n   * Get utility methods from this service instance.\n   * Useful within an HTTP method override\n   */\n  protected getRequestInfoUtils(): RequestInfoUtilities {\n    return {\n      createResponse$: this.createResponse$.bind(this),\n      findById: this.findById.bind(this),\n      isCollectionIdNumeric: this.isCollectionIdNumeric.bind(this),\n      getConfig: () => this.config,\n      getDb: () => this.db,\n      getJsonBody: this.getJsonBody.bind(this),\n      getLocation: this.getLocation.bind(this),\n      getPassThruBackend: this.getPassThruBackend.bind(this),\n      parseRequestUrl: this.parseRequestUrl.bind(this),\n    };\n  }\n\n  /**\n   * return canonical HTTP method name (lowercase) from the request object\n   * e.g. (req.method || 'get').toLowerCase();\n   * @param req - request object from the http call\n   *\n   */\n  protected abstract getRequestMethod(req: any): string;\n\n  protected indexOf(collection: any[], id: number) {\n    return collection.findIndex((item: any) => item.id === id);\n  }\n\n  /** Parse the id as a number. Return original value if not a number. */\n  protected parseId(collection: any[], collectionName: string, id: string): any {\n    if (!this.isCollectionIdNumeric(collection, collectionName)) {\n      // Can't confirm that `id` is a numeric type; don't parse as a number\n      // or else `'42'` -> `42` and _get by id_ fails.\n      return id;\n    }\n    const idNum = parseFloat(id);\n    return isNaN(idNum) ? id : idNum;\n  }\n\n  /**\n   * return true if can determine that the collection's `item.id` is a number\n   * This implementation can't tell if the collection is empty so it assumes NO\n   * */\n  protected isCollectionIdNumeric<T extends { id: any }>(collection: T[], collectionName: string): boolean {\n    // collectionName not used now but override might maintain collection type information\n    // so that it could know the type of the `id` even when the collection is empty.\n    return !!(collection && collection[0]) && typeof collection[0].id === 'number';\n  }\n\n  /**\n   * Parses the request URL into a `ParsedRequestUrl` object.\n   * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\n   *\n   * Configuring the `apiBase` yields the most interesting changes to `parseRequestUrl` behavior:\n   *   When apiBase=undefined and url='http://localhost/api/collection/42'\n   *     {base: 'api/', collectionName: 'collection', id: '42', ...}\n   *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\n   *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\n   *   When apiBase='/' and url='http://localhost/collection'\n   *     {base: '/', collectionName: 'collection', id: undefined, ...}\n   *\n   * The actual api base segment values are ignored. Only the number of segments matters.\n   * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\n   *\n   * To replace this default method, assign your alternative to your InMemDbService['parseRequestUrl']\n   */\n  protected parseRequestUrl(url: string): ParsedRequestUrl {\n    try {\n      const loc = this.getLocation(url);\n      let drop = this.config.rootPath.length;\n      let urlRoot = '';\n      if (loc.host !== this.config.host) {\n        // url for a server on a different host!\n        // assume it's collection is actually here too.\n        drop = 1; // the leading slash\n        urlRoot = loc.protocol + '//' + loc.host + '/';\n      }\n      const path = loc.path.substring(drop);\n      const pathSegments = path.split('/');\n      let segmentIx = 0;\n\n      // apiBase: the front part of the path devoted to getting to the api route\n      // Assumes first path segment if no config.apiBase\n      // else ignores as many path segments as are in config.apiBase\n      // Does NOT care what the api base chars actually are.\n      let apiBase: string;\n      // tslint:disable-next-line:triple-equals\n      if (this.config.apiBase == undefined) {\n        apiBase = pathSegments[segmentIx++];\n      } else {\n        apiBase = removeTrailingSlash(this.config.apiBase.trim());\n        if (apiBase) {\n          segmentIx = apiBase.split('/').length;\n        } else {\n          segmentIx = 0; // no api base at all; unwise but allowed.\n        }\n      }\n      apiBase += '/';\n\n      let collectionName = pathSegments[segmentIx++];\n      // ignore anything after a '.' (e.g.,the \"json\" in \"customers.json\")\n      collectionName = collectionName && collectionName.split('.')[0];\n\n      const id = pathSegments[segmentIx++];\n      const query = this.createQueryMap(loc.query);\n      const resourceUrl = urlRoot + apiBase + collectionName + '/';\n      return { apiBase, collectionName, id, query, resourceUrl };\n\n    } catch (err) {\n      const msg = `unable to parse url '${url}'; original error: ${err.message}`;\n      throw new Error(msg);\n    }\n  }\n\n  // Create entity\n  // Can update an existing entity too if post409 is false.\n  protected post({ collection, collectionName, headers, id, req, resourceUrl, url }: RequestInfo): ResponseOptions {\n    const item = this.clone(this.getJsonBody(req));\n\n    // tslint:disable-next-line:triple-equals\n    if (item.id == undefined) {\n      try {\n        item.id = id || this.genId(collection, collectionName);\n      } catch (err) {\n        const emsg: string = err.message || '';\n        if (/id type is non-numeric/.test(emsg)) {\n          return this.createErrorResponseOptions(url, STATUS.UNPROCESSABLE_ENTRY, emsg);\n        } else {\n          console.error(err);\n          return this.createErrorResponseOptions(url, STATUS.INTERNAL_SERVER_ERROR,\n            `Failed to generate new id for '${collectionName}'`);\n        }\n      }\n    }\n\n    if (id && id !== item.id) {\n      return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, `Request id does not match item.id`);\n    } else {\n      id = item.id;\n    }\n    const existingIx = this.indexOf(collection, id);\n    const body = this.bodify(item);\n\n    if (existingIx === -1) {\n      collection.push(item);\n      headers.set('Location', resourceUrl + '/' + id);\n      return { headers, body, status: STATUS.CREATED };\n    } else if (this.config.post409) {\n      return this.createErrorResponseOptions(url, STATUS.CONFLICT,\n        `'${collectionName}' item with id='${id} exists and may not be updated with POST; use PUT instead.`);\n    } else {\n      collection[existingIx] = item;\n      return this.config.post204 ?\n          { headers, status: STATUS.NO_CONTENT } : // successful; no content\n          { headers, body, status: STATUS.OK }; // successful; return entity\n    }\n  }\n\n  // Update existing entity\n  // Can create an entity too if put404 is false.\n  protected put({ collection, collectionName, headers, id, req, url }: RequestInfo): ResponseOptions {\n    const item = this.clone(this.getJsonBody(req));\n    // tslint:disable-next-line:triple-equals\n    if (item.id == undefined) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, `Missing '${collectionName}' id`);\n    }\n    if (id && id !== item.id) {\n      return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST,\n        `Request for '${collectionName}' id does not match item.id`);\n    } else {\n      id = item.id;\n    }\n    const existingIx = this.indexOf(collection, id);\n    const body = this.bodify(item);\n\n    if (existingIx > -1) {\n      collection[existingIx] = item;\n      return this.config.put204 ?\n          { headers, status: STATUS.NO_CONTENT } : // successful; no content\n          { headers, body, status: STATUS.OK }; // successful; return entity\n    } else if (this.config.put404) {\n      // item to update not found; use POST to create new item for this id.\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND,\n        `'${collectionName}' item with id='${id} not found and may not be created with PUT; use POST instead.`);\n    } else {\n      // create new item for id not found\n      collection.push(item);\n      return { headers, body, status: STATUS.CREATED };\n    }\n  }\n\n  protected removeById(collection: any[], id: number) {\n    const ix = this.indexOf(collection, id);\n    if (ix > -1) {\n      collection.splice(ix, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Tell your in-mem \"database\" to reset.\n   * returns Observable of the database because resetting it could be async\n   */\n  protected resetDb(reqInfo?: RequestInfo): Observable<boolean> {\n    this.dbReadySubject.next(false);\n    const db = this.inMemDbService.createDb(reqInfo);\n    const db$ = db instanceof Observable ? db :\n           typeof (db as any).then === 'function' ? from(db as Promise<any>) :\n           of(db);\n    db$.pipe(first()).subscribe((d: {}) => {\n      this.db = d;\n      this.dbReadySubject.next(true);\n    });\n    return this.dbReady;\n  }\n\n}\n"]}